// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.RobotFinal.commands;

import edu.wpi.first.wpilibj.command.Command;





import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5571.RobotFinal.Robot;
import org.usfirst.frc5571.RobotFinal.subsystems.Clamp;

/**
 *
 */
public class  ClampCommand extends Command {
	boolean position_held;
	private Clamp clampController = Robot.clamp;
    public ClampCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.clamp);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		clampController.initCanPID();
		clampController.initClampLimits();
		SmartDashboard.putString("Clamp MODE:", "Initialized");
		position_held = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (Robot.oi.Bumper_L) {
    		position_held = false;
  		  if (!clampController.clampCurrenLimited()){
  			clampController.openClamp();
  			SmartDashboard.putString("Clamp MODE:", "Opening");
  			}
  			else{ // current limit exceeded
  				if (!position_held) {
  					clampController.holdCurrentPosition();
  					SmartDashboard.putString("Clamp MODE:", "OPEN CURRENT EXCEEDED");
  					position_held = true;
  				}
  				clampController.servoHere();
  			}
      	//RobotMap.clampCANTalonClamp.set(-1);
  		  
    		}else
    			if (Robot.oi.Bumper_R) {
    				position_held = false;
    			  if (!clampController.clampCurrenLimited()){
    			clampController.closeClamp();
    				SmartDashboard.putString("Clamp MODE:", "Closing");
    			}
    			else{ // current limit exceeded
    				if (!position_held) {
    					clampController.holdCurrentPosition();
    					SmartDashboard.putString("Clamp MODE:", "CLOSE CURRENT LIMIT EXCEEDED");
    					position_held = true;
    				}
    				clampController.servoHere();
    			}
    	  //RobotMap.clampCANTalonClamp.set(1);
        } else {
        	clampController.servoHere();
        }
   }


    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	clampController.showCanTalonStatus();
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    }
}
