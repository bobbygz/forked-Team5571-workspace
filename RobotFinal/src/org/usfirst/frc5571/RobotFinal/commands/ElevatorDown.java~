// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.RobotFinal.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5571.RobotFinal.Robot;
import org.usfirst.frc5571.RobotFinal.RobotMap;
import org.usfirst.frc5571.RobotFinal.subsystems.Elevator;

/**
 *
 */
public class  ElevatorDown extends Command {
	private Elevator elevController = Robot.elevator;
	boolean position_held;
    public ElevatorDown() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		elevController.initCanPID();
		SmartDashboard.putString("Elev MODE:", "Initialized");
		position_held = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	position_held = false;
//		  if (!elevController.elevCurrenLimited()){
			elevController.downElev();
//				SmartDashboard.putString("Elev MODE:", "Opening");
//			}
//			else{ // current limit exceeded
//				if (!position_held) {
//					elevController.holdCurrentPosition();
//					SmartDashboard.putString("Elev MODE:", "OPEN CURRENT EXCEEDED");
//					position_held = true;
//				}
//				elevController.servoHere();
//			}
    	//RobotMap.elevatorCANTalonElev.set(-1);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	elevController.showCanTalonStatus();
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	elevController.disable_ElevMotor();
    }
}
