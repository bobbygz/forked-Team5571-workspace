// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.RobotFinal.subsystems;

import org.usfirst.frc5571.RobotFinal.Robot;
import org.usfirst.frc5571.RobotFinal.RobotMap;
import org.usfirst.frc5571.RobotFinal.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


public class Clamp extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CANTalon cANTalonClamp = RobotMap.clampCANTalonClamp;

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	// Put methods for controlling this subsystem
		// here. Call these from Commands.
		double axis;
		static double MAX_CLAMP_CURRENT = 20.0;  // limit current to 3A  motor is rated at 36.91W 
		static double CLOSE_SPEED = 320;  // position change per 10 ms
		static double OPEN_SPEED = -320;  // position change per 10 ms
		double p;
		double i;;
		double d;
		double f;
		int izone;
		double ramprate;  // this should leave the ramp rate uncapped.
		int profile;
		boolean servoHereFlag;
		double servoAtThisPosition;

		public void initClampLimits() {
			cANTalonClamp.enableBrakeMode(true);
			cANTalonClamp.enableLimitSwitch(true, true);
		}

		public void initCanPID() {

			// Set PID values for Velocity and Position Mode here in profile 0
			p = 6;
			i = .0006;
			d = 0.95;
			f = 0;
			izone = 0;
			ramprate = 0;  // this should leave the ramp rate uncapped.
			profile = 0;
			cANTalonClamp.setPID(p, i, d, f, izone, ramprate, profile);

			// Set PID values for Servo In Place Posisiotn Mode here in profile 1
			p = 6.0;
			i = 0.0006;
			d = 0.95;
			f = 0.0;
			izone = 0;
			ramprate = 0;  // this should leave the ramp rate uncapped.
			profile = 1;
			cANTalonClamp.setPID(p, i, d, f, izone, ramprate, profile);

			// Specify Quadrature Encoder
			cANTalonClamp.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
			cANTalonClamp.reverseSensor(false);
			//Reverse = true for gripper motor
			//Reverse = false for pulley

		}

		// Change to closed loop control mode and hold the current position
		public void positionMode() {
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Position);
			cANTalonClamp.set(cANTalonClamp.getPosition());
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");
		}

		// Change to closed loop control mode and move "count" ticks 
		public void positionMoveByCount(double count) {
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Position);
			cANTalonClamp.set((cANTalonClamp.getPosition()+count));
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");

		}

		// Change to Closed Loop Velocity Mode and
		public void speedMode() {
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Speed);
			axis = Robot.oi.xboxController.getY();
			cANTalonClamp.set(axis*12.0); // need to scale the voltage by the joystick values;
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");

		}

		public void closeClamp() {
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Speed);
			cANTalonClamp.set(CLOSE_SPEED);
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");
		}

		public void openClamp() {
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Speed);
			cANTalonClamp.set(OPEN_SPEED);
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");
		}


		public void servoHere(){
			if (!servoHereFlag){ // first time through, so set flag and get the current position
				servoHereFlag = true;
				servoAtThisPosition = cANTalonClamp.getPosition()+16;
				cANTalonClamp.setProfile(1);
			}
			if (!clampCurrenLimited()){
				cANTalonClamp.changeControlMode(CANTalon.ControlMode.Position);
				cANTalonClamp.set(servoAtThisPosition);
				SmartDashboard.putString("Clamp Servo Status", "ServoActive");
			}
			else{
				cANTalonClamp.changeControlMode(CANTalon.ControlMode.PercentVbus);
				//cANTalonClamp.set(0);
				SmartDashboard.putString("Clamp Servo Status", "CurrentLimited");
			}
		}


		public void holdCurrentPosition(){
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.Position);
			cANTalonClamp.set(cANTalonClamp.getPosition());
		}

		public void disable_ClampMotor(){
			servoHereFlag = false;
			cANTalonClamp.setProfile(0);
			cANTalonClamp.changeControlMode(CANTalon.ControlMode.PercentVbus);
			cANTalonClamp.set(0);
			SmartDashboard.putString("Clamp Servo Status", "Servo Inactive");
		}

		public Boolean clampCurrenLimited(){ 
			return(cANTalonClamp.getOutputCurrent() > MAX_CLAMP_CURRENT);
		}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    

    public void showCanTalonStatus() {

    	double currentAmps = cANTalonClamp.getOutputCurrent();
    	double outputV = cANTalonClamp.getOutputVoltage();
    	double busV = cANTalonClamp.getBusVoltage();
    	double quadEncoderPos = cANTalonClamp.getEncPosition();
    	double quadEncoderVelocity = cANTalonClamp.getEncVelocity();
    	double selectedSensorPos = cANTalonClamp.getPosition();
    	double selectedSensorSpeed = cANTalonClamp.getSpeed();
    	double Iaccum = cANTalonClamp.GetIaccum();
    	double encoderErr = cANTalonClamp.getClosedLoopError();

    		SmartDashboard.putNumber("Clamp Current", currentAmps);
    		SmartDashboard.putNumber("Clamp Output Voltage", outputV);
    		SmartDashboard.putNumber("Clamp Bus Voltage", busV);
    		SmartDashboard.putNumber("Clamp Encoder Position", quadEncoderPos);
    		SmartDashboard.putNumber("Clamp Encoder Velocity", quadEncoderVelocity);
    		SmartDashboard.putNumber("Clamp Position", selectedSensorPos);
    		SmartDashboard.putNumber("Clamp Speed", selectedSensorSpeed);
    		SmartDashboard.putNumber("Clamp I Accumulation", Iaccum);
    		SmartDashboard.putNumber("Clamp Closed Loop Err", encoderErr);
    		SmartDashboard.putBoolean("Clamp ServoHere Flag", servoHereFlag);


    }

}

