// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5571.MecanumDriveTest.subsystems;

import org.usfirst.frc5571.MecanumDriveTest.RobotMap;
import org.usfirst.frc5571.MecanumDriveTest.commands.*;
import org.usfirst.frc5571.MecanumDriveTest.Robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */

public class DriveTrain2 extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    CANTalon cANTalon1 = RobotMap.driveTrain2CANTalon1;
    CANTalon cANTalon2 = RobotMap.driveTrain2CANTalon2;
    CANTalon cANTalon3 = RobotMap.driveTrain2CANTalon3;
    CANTalon cANTalon4 = RobotMap.driveTrain2CANTalon4;
    RobotDrive robotDrive2 = RobotMap.driveTrain2RobotDrive2;
	// BG Added this so the DriveTrain class arcadeDrive method can be used
    
    public void getMotorCurrent() {
    	SmartDashboard.putNumber("Motor Current ID: 1", cANTalon1.getOutputCurrent());
    	SmartDashboard.putNumber("Motor Current ID: 4", cANTalon2.getOutputCurrent());
    	SmartDashboard.putNumber("Motor Current ID: 2", cANTalon3.getOutputCurrent());
    	SmartDashboard.putNumber("Motor Current ID: 3", cANTalon4.getOutputCurrent());
    }
    
    
    
	public void mecanumDrive_Polar() {
		robotDrive2.mecanumDrive_Polar(correctDeadSpot( Robot.oi.xboxController.getMagnitude() ), Robot.oi.xboxController.getDirectionDegrees(), (  (Robot.oi.xboxController.getRawAxis(2) * -1) + Robot.oi.xboxController.getRawAxis(3) )  );
				
		//The correct dead spot may only need to be on Direction, or on both.
	}
	
    public double correctDeadSpot(double value) {
    	double deadZone = 0.15; 					//This sets a deadzone that i have seen works for Xboc controllers online
        if (Math.abs(value) < deadZone ) 			//Checks value pulled from the double inside the methode against the deadzone.
                return 0; 							// if less than the deadzone, returns nothing.
        return value; 								//Above deadzone just applies voltage.
}

	// Added this so the stop method can be used
	public void stop() {
		robotDrive2.mecanumDrive_Polar(0, 0, 0);

	}
	
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveTrain2Command());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
